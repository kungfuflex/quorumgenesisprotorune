// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "proto/quorum.proto" (package "quorum", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Outpoint } from "../node_modules/protorune/proto/protorune";
/**
 * @generated from protobuf message quorum.RuneRange
 */
export interface RuneRange {
}
/**
 * @generated from protobuf message quorum.RuneRangeInput
 */
export interface RuneRangeInput {
    /**
     * @generated from protobuf field: protorune.Outpoint outpoint = 1;
     */
    outpoint?: Outpoint;
}
// @generated message type with reflection information, may provide speed optimized methods
class RuneRange$Type extends MessageType<RuneRange> {
    constructor() {
        super("quorum.RuneRange", []);
    }
    create(value?: PartialMessage<RuneRange>): RuneRange {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RuneRange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RuneRange): RuneRange {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RuneRange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message quorum.RuneRange
 */
export const RuneRange = new RuneRange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RuneRangeInput$Type extends MessageType<RuneRangeInput> {
    constructor() {
        super("quorum.RuneRangeInput", [
            { no: 1, name: "outpoint", kind: "message", T: () => Outpoint }
        ]);
    }
    create(value?: PartialMessage<RuneRangeInput>): RuneRangeInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RuneRangeInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RuneRangeInput): RuneRangeInput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* protorune.Outpoint outpoint */ 1:
                    message.outpoint = Outpoint.internalBinaryRead(reader, reader.uint32(), options, message.outpoint);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RuneRangeInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* protorune.Outpoint outpoint = 1; */
        if (message.outpoint)
            Outpoint.internalBinaryWrite(message.outpoint, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message quorum.RuneRangeInput
 */
export const RuneRangeInput = new RuneRangeInput$Type();
